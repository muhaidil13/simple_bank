// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: entries.sql

package sqlc

import (
	"context"
)

const createEntries = `-- name: CreateEntries :one
INSERT INTO entries(
    account_id,
    ammount
) VALUES (
    $1, $2
) RETURNING id, account_id, ammount, created_at
`

type CreateEntriesParams struct {
	AccountID int64 `json:"account_id"`
	Ammount   int64 `json:"ammount"`
}

func (q *Queries) CreateEntries(ctx context.Context, arg CreateEntriesParams) (Entry, error) {
	row := q.db.QueryRowContext(ctx, createEntries, arg.AccountID, arg.Ammount)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Ammount,
		&i.CreatedAt,
	)
	return i, err
}

const deleteEntries = `-- name: DeleteEntries :exec
DELETE FROM entries WHERE id = $1
`

func (q *Queries) DeleteEntries(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteEntries, id)
	return err
}

const getEntries = `-- name: GetEntries :one
SELECT id, account_id, ammount, created_at FROM entries
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetEntries(ctx context.Context, id int64) (Entry, error) {
	row := q.db.QueryRowContext(ctx, getEntries, id)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Ammount,
		&i.CreatedAt,
	)
	return i, err
}

const listEntries = `-- name: ListEntries :many
SELECT id, account_id, ammount, created_at FROM entries
ORDER BY id 
LIMIT $1 
OFFSET $2
`

type ListEntriesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListEntries(ctx context.Context, arg ListEntriesParams) ([]Entry, error) {
	rows, err := q.db.QueryContext(ctx, listEntries, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Entry
	for rows.Next() {
		var i Entry
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Ammount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEntries = `-- name: UpdateEntries :one
UPDATE entries
SET ammount = $2
WHERE id = $1
RETURNING id, account_id, ammount, created_at
`

type UpdateEntriesParams struct {
	ID      int64 `json:"id"`
	Ammount int64 `json:"ammount"`
}

func (q *Queries) UpdateEntries(ctx context.Context, arg UpdateEntriesParams) (Entry, error) {
	row := q.db.QueryRowContext(ctx, updateEntries, arg.ID, arg.Ammount)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Ammount,
		&i.CreatedAt,
	)
	return i, err
}
